<link rel="stylesheet" href="~/css/Main.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui@2.2.13/dist/semantic.min.css">
@{
    Pager pager = new Pager();
    int pageNo = 0;

    if (ViewBag.Pager != null)
    {
        pager = ViewBag.Pager;
        pageNo = pager.CurrenPage;
    }
}

<style>
    .button-container {
        display: flex;
        gap: 10px;
        padding: 10px;
        flex-wrap: wrap; /* Wrap buttons if the container is not wide enough */
    }

    .color-button {
        padding: 15px;
        border-radius: 50%;
        border: none;
        outline: 1px solid black;
        cursor: pointer;
        display: block; /* Allow block-level behaviors */
    }

        .color-button.selected {
            border: 3px solid black;
        }

    .button-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center; /* Center the content */
        width: 50px; /* Set a fixed width for the wrapper */
    }

    .button-label {
        margin-top: 5px;
        text-align: center;
        font-size: 12px;
    }
    /* Add more colors as needed */
    .silver {
        background-color: #C0C0C0;
    }

    .beige {
        background-color: #e1cf9d;
    }

    .black {
        background-color: #000000;
    }

    .white {
        background-color: #FFFFFF;
    }

    .navy {
        background-color: #000080;
    }


    .brown {
        background-color: #bc7c52;
    }

    .blue {
        background-color: #bfb8fd;
    }

    .green {
        background-color: #3a9b51;
    }

    .red {
        background-color: #db2828;
    }

    .button-label-large {
        font-size: 14px; /* Set a larger font size */
        font-weight: bold; /* Optionally, make the font bold */
    }
</style>


<form id="paginationForm" style="margin-left:10%; margin-right:10%">
    <div style="display: flex; padding-top: 2%">
        @if (ViewBag.Search != null)
        {
            <h3 style="width:500px">Searching: @ViewBag.Search</h3>
        }
        else
        {
            <h3 style="width:500px"></h3>
        }
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#modalCart" style="background-color:white; color: black; border:none; margin-left:49%; font-size: 16px; margin-bottom:5%">Filter <i class="bi bi-arrow-down"></i></button>
        <div class="modal fade" id="modalCart" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
             aria-hidden="true">
            <div class="modal-dialog" role="document" style="margin-left:20%; margin-top:6%">
                <div class="modal-content" style="width:200%; height:550px">
                    <div style="display:flex; margin: 3%;">
                        <section class="ftco-section" style="min-width:60%; margin-right:5%">
                            <div>
                                <label>Brand</label>
                                <select id="brand_filter" name="filterBrand" multiple class="label ui selection fluid dropdown" asp-items="@ViewBag.Brands">
                                    @if (ViewBag.SelectedBrand != null)
                                    {
                                        foreach (var item in ViewBag.SelectedBrand)
                                        {
                                            <option value="@item.Id" selected>@item.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </section>
                        <section class="ftco-section" style="min-width:25%; margin-right:5%">
                            <div class="inline w-100 field">
                                <div style="display:flex">
                                    <label>Gender</label>
                                    <button class="btn btn-primary" type="button" style="background: rgb(255,255,255);color: rgb(0,0,0);border-style: none; padding:0; padding-left:58%; font-size:10px; text-decoration:underline">Clear all</button>
                                </div>
                                <select name="filterGender" multiple class="label ui selection fluid dropdown" asp-items="@ViewBag.Gender">
                                    @if (ViewBag.SelectedGender != null)
                                    {
                                        foreach (var item in ViewBag.SelectedGender)
                                        {
                                            <option value="@item" selected>@item</option>
                                        }
                                    }
                                </select>
                            </div>
                        </section>
                    </div>
                    <div style="display:flex; margin: 3%; margin-top:0%">
                        <section class="ftco-section" style="min-width:60%; margin-right:5%">
                            <div>
                                <label>Collection</label>
                                <select name="filterCollection" multiple class="label ui selection fluid dropdown" asp-items="@ViewBag.Collections">
                                    @if (ViewBag.SelectedCollection != null)
                                    {
                                        foreach (var item in ViewBag.SelectedCollection)
                                        {
                                            <option value="@item.Id" selected>@item.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </section>
                        <section class="ftco-section" style="min-width:25%; margin-right:5%">
                            <div class="inline w-100 field">
                                <label>Category</label>
                                <select name="filterCategory" multiple class="label ui selection fluid dropdown" asp-items="@ViewBag.Categories">
                                    @if (ViewBag.SelectedCategory != null)
                                    {
                                        foreach (var item in ViewBag.SelectedCategory)
                                        {
                                            <option value="@item.Id" selected>@item.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </section>
                    </div>
                    <div>
                        <section class="ftco-section" style="margin-left:17%">
                            <div class="inline w-100 field">
                                <div class="button-container">
                                    <div class="button-wrapper">
                                        <button class="color-button beige" value="Beige" onclick="toggleButton(this, 'Beige')"></button>
                                        <div class="button-label">Beige</div>
                                    </div>
                                    <div class="button-wrapper">
                                        <button class="color-button silver" value="Silver" onclick="toggleButton(this, 'Silver')"></button>
                                        <div class="button-label">Silver</div>
                                    </div>
                                    <div class="button-wrapper">
                                        <button class="color-button red" value="Red" onclick="toggleButton(this, 'Red')"></button>
                                        <div class="button-label">Red</div>
                                    </div>
                                    <div class="button-wrapper">
                                        <button class="color-button blue" value="Blue" onclick="toggleButton(this, 'Blue')"></button>
                                        <div class="button-label">Blue</div>
                                    </div>
                                    <div class="button-wrapper">
                                        <button class="color-button black" value="Black" onclick="toggleButton(this, 'Black')"></button>
                                        <div class="button-label">Black</div>
                                    </div>
                                    <div class="button-wrapper">
                                        <button class="color-button green" value="Green" onclick="toggleButton(this, 'Green')"></button>
                                        <div class="button-label">Green</div>
                                    </div>
                                    <div class="button-wrapper">
                                        <button class="color-button white" value="White" onclick="toggleButton(this, 'White')"></button>
                                        <div class="button-label">White</div>
                                    </div>
                                    <div class="button-wrapper">
                                        <button class="color-button navy" value="Navy" onclick="toggleButton(this, 'Navy')"></button>
                                        <div class="button-label">Navy</div>
                                    </div>
                                    <div class="button-wrapper">
                                        <button class="color-button brown" value="Brown" onclick="toggleButton(this, 'Brown')"></button>
                                        <div class="button-label">Brown</div>
                                    </div>
                                </div>
                            </div>
                        </section>
                    </div>
                    @if (ViewBag.SelectedColor != null)
                    {
                        <input name="filterColor" value="@String.Join(",", ViewBag.SelectedColor)" hidden />
                    }
                    else
                    {
                        <input name="filterColor" hidden/>
                    }
                    <div>
                        <label style="min-width:25%; margin-left:3%">Price</label>
                        <div class="card">
                            <div class="price-content">
                                <div>
                                    <label>Min</label>
                                    <p id="min-value">$0</p>
                                </div>

                                <div>
                                    <label>Max</label>
                                    <p id="max-value">$1000</p>
                                </div>
                            </div>


                            <div class="range-slider">
                                <input type="range" name="minPrice" class="min-price" value="@ViewBag.MinPrice" min="0" max="1000" step="10">
                                <input type="range" name="maxPrice" class="max-price" value="@ViewBag.MaxPrice" min="0" max="1000" step="10">
                            </div>
                        </div>
                    </div>
                    <button class="btn btn-primary" style="background: rgb(60,61,67); width:50%; height:10%; border:none; margin-left:25%; margin-top:5%" asp-action="Main" type="submit" asp-controller="Home">Filter</button>
                </div>
            </div>
        </div>
        <!-- Modal: modalCart -->
    </div>

    <section class="section-products" style="padding-top:0px !important; margin-top:-3%">
        <div class="row">
            @foreach (var Product in Model)
            {
                <div class="col-md-3 col-sm-6" style="margin-bottom:6%">
                    <div class="product-grid">
                        <div class="product-image">
                            <a asp-action="Details" asp-route-productid="@Product.Id" class="image">
                                <img class="pic-1" src="@Product.ImageUrl">
                                <img class="pic-2" src="@Product.SecondImage">
                            </a>
                            <a href="" class="product-like-icon"></a>
                            <form id="addToCartForm" method="post">
                                <ul class="product-links">
                                    <li><a asp-action="Details" asp-route-productid="@Product.Id"><i class="fa fa-eye"></i></a></li>
                                    <li><a onclick="addToCart(@Product.Id)"><i class="fa fa-shopping-cart"></i></a></li>
                                </ul>
                            </form>
                        </div>
                        <div class="product-content">
                            <h2 class="title" style="min-height:45px">@Product.Name</h2>
                            <p class="price">$@Product.Price.ToString("0.00")</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </section>

    <div class="container d-flex justify-content-center" style="margin-top:100px">
        @if (pager.TotalPages > 0)
        {
            <ul class="pagination">
                @if (pager.CurrenPage > 1)
                {
                    <button type="button" class="pagination-button" data-page="@(pager.CurrenPage - 1)" onclick="changePage(this)">Previous</button>
                }
                @for (var i = pager.StartPage; i <= pager.EndPage; i++)
                {
                    <button type="submit" class="@(i == pager.CurrenPage ? "active pagination-button": "pagination-button")" asp-action="Main" data-page="@i">@i</button>

                }

                @if (pager.CurrenPage < pager.TotalPages)
                {
                    <button type="button" class="pagination-button" data-page="@(pager.CurrenPage + 1)" onclick="changePage(this)">Next</button>
                }

                <input type="hidden" id="clickedPage" name="page" value="" />
            </ul>
        }
    </div>
</form>

<script src="~/js/jquery.min.js"></script>
<script src="~/js/popper.js"></script>
<script src="~/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/semantic-ui@2.2.13/dist/semantic.min.js"></script>
<script src="~/js/main.js"></script>

<script>
    function toggleButton(button, colorValue) {
        event.preventDefault();
        button.classList.toggle('selected');
        let label = button.nextElementSibling;
        if (label.classList.contains('button-label')) {
            label.classList.toggle('button-label-large');
        }

        // Get the filterColor input
        let filterColorInput = document.getElementsByName('filterColor')[0];

        // Convert the current value of the input to an array
        let selectedColors = filterColorInput.value ? filterColorInput.value.split(',') : [];

        // Check if the button is selected or not
        if (button.classList.contains('selected')) {
            // Add the color to the array if it's selected
            selectedColors.push(colorValue);
        } else {
            // Remove the color from the array if it's deselected
            let colorIndex = selectedColors.indexOf(colorValue);
            if (colorIndex > -1) {
                selectedColors.splice(colorIndex, 1);
            }
        }

        // Update the input value
        filterColorInput.value = selectedColors.join(',');
    }
</script>

<script>
    $(document).ready(function () {
        var selectedColors = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.SelectedColor));

        $('.color-button').each(function () {
            var button = $(this);
            if (selectedColors.includes(button.val())) {
                // Apply the 'selected' state to the button.
                button.addClass('selected');
                button.siblings('.button-label').addClass('button-label-large');
            }
        });
    });
</script>


<script>
    // JavaScript to capture the value of clicked pagination button
    const paginationButtons = document.querySelectorAll('.pagination-button');
    const clickedPageInput = document.getElementById('clickedPage');
    const form = document.getElementById('paginationForm'); // Replace 'paginationForm' with your form's ID

    paginationButtons.forEach(button => {
        button.addEventListener('click', function () {
            const pageNumber = this.getAttribute('data-page');
            clickedPageInput.value = pageNumber;
            form.submit(); // Submit the form
        });
    });

    (function () {
        function changePage(button) {
            const pageValue = button.getAttribute('data-page');
            const clickedPageInput = document.getElementById('clickedPage');
            const form = document.getElementById('paginationForm');
            clickedPageInput.value = pageValue;
            form.submit();
        }

        let minValue = document.getElementById("min-value");
        let maxValue = document.getElementById("max-value");

        function validateRange(minPrice, maxPrice) {
            minPrice = parseInt(minPrice, 10);
            maxPrice = parseInt(maxPrice, 10);

            if (isNaN(minPrice) || isNaN(maxPrice)) {
                console.error('Invalid price range values');
                return;
            }

            if (minPrice > maxPrice) {
                [minPrice, maxPrice] = [maxPrice, minPrice];
            }

            minValue.textContent = `$${minPrice}`;
            maxValue.textContent = `$${maxPrice}`;
        }

        document.querySelectorAll('.min-price, .max-price').forEach(element => {
            element.addEventListener('input', () => {
                const minPrice = document.querySelector('.min-price').value;
                const maxPrice = document.querySelector('.max-price').value;
                validateRange(minPrice, maxPrice);
            });
        });

        // Initialize with current values
        validateRange(document.querySelector('.min-price').value, document.querySelector('.max-price').value);

    })();

</script>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>
    // Function to handle the form submission using AJAX
    function addToCart(productId) {
        event.preventDefault();

        var count = 1;
        var form = document.getElementById("addToCartForm");
        var formData = new FormData(form);
        formData.append("ProductId", productId);
        formData.append("Count", count);

        $.ajax({
            type: "POST",
            url: 'https://ropinstore.azurewebsites.net/Customer/Home/Details?productid=' + productId,
            data: formData,
            processData: false, // Prevent jQuery from processing data
            contentType: false, // Prevent jQuery from setting content type
            // Handle success and error as needed
            success: function (response) {
                if (response.success) {
                    var cartCount = response.cartCount;
                    Swal.fire({
                        position: 'top-end',
                        icon: 'success',
                        title: 'Added to cart',
                        showConfirmButton: false,
                        timer: 1500,
                        timerProgressBar: true,
                        backdrop: false
                    })
                } else {
                    // Handle any errors or display a message
                    alert("An error occurred while adding to the cart.");
                }
            },
            error: function (xhr, status, error) {
                // Handle the AJAX request error
                console.log("AJAX Error: " + error);
                console.log("Status: " + status);
                console.log(xhr.responseText); // This will contain the detailed error message from the server
                Swal.fire({
                    title: 'Purchase this item?',
                    text: "You need to login into our website!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Go to login page'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // If the user confirmed, redirect to the login page
                        window.location.href = 'https://ropinstore.azurewebsites.net/Identity/Account/Login';
                    }
                });
            }
        });
    }

</script>
